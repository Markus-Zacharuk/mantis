f(x) = { r = 1; for i=1; i<=x; i=i+1; {r=r*i;} r;}
// faculty recursive
f(x) = if x==1: 1 else: f(x-1)*x;
// faculty iterative
f(x) = { if x <= 2: return x; result = 2; for i=3; i<=x; i=i+1; {result = result*i;} return result;}
def f(x):
		if x <= 2:
				return x
		result = 2
		for i in range(3, x+1):
				result = result*i
		return result
		
// LLTest
lltest(x) = {
	if -isprime(x, 45): return 0;
	var = 4;
	for i=2; i<x; i=i+1; {
		var = (var**2) % x;
	}
	if var == 0: return 1;
	else: return 0;
}

lltest(x) = { var = 4; m = 2**x-1; for i=2; i<x; i=i+1; {var = (var**2 - 2) % m; } return var; }
lltest(x) = { var = 4; m = 2**x-1; for i=2; i<x; i=i+1; {var = (var**2 - 2) % m; print(i, end=",\t"); } return var; }
lltest(x) = { var = 4; m = 2**x-1; print(m); for i=2; i<x; i=i+1; {var = (var**2 - 2) % m; print(i, end="\t"); } return var; }
lltest(x) = { var = 4; m = 2**x-1; print(m); for i=2; i<x; i=i+1; {var = (var**2 - 2) % m; print(i, var, sep=",\t"); } return var; }

//python
def lltest(x):
	var = 4
	m = (2**x)-1
	for i in range(2, x):
		var = ((var**2) - 2) % m
		print(i, end="\t", flush=True)
	return var
	
kettenbruch(x) = { var = q(0); for i=1; i<=x; i=i+1; { var = var + q(1, i); print(i, flt(var), sep=":\t"); } }

